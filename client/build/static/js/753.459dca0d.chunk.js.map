{"version":3,"file":"static/js/753.459dca0d.chunk.js","mappings":"uKACA,QAAmC,2C,kCCAnC,QAAgC,qCAAhC,EAAmF,mCAAnF,EAAgI,+BAAhI,EAA6K,mCAA7K,EAAuN,4BAAvN,EAA2P,6BAA3P,EAAsS,mCAAtS,EAAwV,oCAAxV,EAAqY,8BAArY,EAAkb,oC,aCMlb,MA+EA,EA/EsBA,IAAmE,IAAlE,MAACC,EAAK,YAAEC,EAAW,WAAEC,EAAU,SAAEC,EAAQ,iBAAEC,GAAiBL,EACjF,MAAOM,EAAiBC,IAAsBC,EAAAA,EAAAA,WAAS,IAChDC,EAASC,IAAcF,EAAAA,EAAAA,UAAS,CACrCC,QAAS,GACTE,SAAS,IAGLC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CAACC,MAAO,IACvBV,iBAAkBA,EAClBD,SAAUA,CAACY,EAAMC,KAAmB,IAAjB,UAACC,GAAUD,EAC5Bb,EAASY,GACJG,MAAMC,IACDA,IACFb,GAAmB,GACnBG,EAAW,CAACD,QAASW,EAAOX,QAASE,SAAS,IAC9CO,IACF,IAEDG,OAAOC,IACFA,IACFf,GAAmB,GACnBG,EAAW,CAACD,QAASa,EAAMb,QAASE,SAAS,IAC/C,GACA,IAIV,OACEY,EAAAA,EAAAA,MAAA,WAASC,UAAWC,EAAqBC,SAAA,EACvCH,EAAAA,EAAAA,MAAA,WACEC,UAAS,GAAAG,OAAKF,EAAkB,KAAAE,OAAIlB,EAAQE,QAAUc,EAAsB,IAC5EG,MAAO,CAACC,QAASvB,EAAkB,IAAM,KAAKoB,SAAA,EAE9CI,EAAAA,EAAAA,KAAA,KAAGN,UAAWC,EAAeC,SAAEjB,EAAQA,WACvCqB,EAAAA,EAAAA,KAAA,UACEN,UAAWC,EACXM,KAAK,SACL,aAAW,gBACXC,QAASA,IAAMzB,GAAmB,GAAOmB,UAEzCI,EAAAA,EAAAA,KAACG,EAAAA,EAAS,UAGdV,EAAAA,EAAAA,MAAA,QAAMC,UAAWC,EAAarB,SAAUQ,EAAOsB,aAAaR,SAAA,EAC1DI,EAAAA,EAAAA,KAAA,MAAIN,UAAWC,EAAaC,SAAEzB,KAC9B6B,EAAAA,EAAAA,KAAA,KAAGN,UAAWC,EAAmBC,SAAExB,KACnCqB,EAAAA,EAAAA,MAAA,WAASC,UAAWC,EAAoBC,SAAA,EACtCI,EAAAA,EAAAA,KAACK,EAAAA,EAAS,CACRC,KAAK,QACLC,YAAY,oBACZC,aAAa,OACbC,SAAU3B,EAAO4B,aACjBlB,MAAOV,EAAO6B,OAAO1B,MACrB2B,MAAO9B,EAAOI,OAAOD,MACrB4B,QAAS/B,EAAO+B,WAElBb,EAAAA,EAAAA,KAAA,UACEN,UAAWC,EACXmB,UAAWhC,EAAOiC,MAClBd,KAAK,SACL,aAAW,cAAaL,UAExBI,EAAAA,EAAAA,KAAA,QAAAJ,SAAOvB,cAIL,E,kCC9Dd,MA2GA,EA3GyB2C,KACvB,MAAMC,EAAWC,OAAOC,YAAc,IA2CtC,OACEnB,EAAAA,EAAAA,KAAA,WAASN,UAAWC,EAAwBC,UAC1CI,EAAAA,EAAAA,KAACoB,EAAa,CACZ/C,WAAU,GAAAwB,OAAKoB,EAAS,YAAY,+BACpC1C,iBAAkB8C,EAAAA,GAClB/C,SA/CgBY,GACboC,EAAAA,EAAkBC,IAAI,CAACtC,MAAOC,EAAOD,QACvCI,MAAMC,IAAM,CACXX,QAAS6C,EAAAA,EAAqBlC,EAAOmC,SAAS9C,aAE/CY,OAAOC,IACN,MAAM,IAAIkC,MAAMF,EAAAA,EAAqBhC,EAAMiC,SAASE,KAAKF,SAAS9C,SAAS,IA0C7EP,YAAY,8GACZD,MAAM,gBAoDA,C","sources":["webpack://pet-project-frontend/./src/pages/mainPage/NewsLettersBlock/NewsLettersBlock.module.scss?06bd","webpack://pet-project-frontend/./src/components/SubscribForm/SubscribeForm.module.scss?df50","components/SubscribForm/SubscribeForm.jsx","pages/mainPage/NewsLettersBlock/NewsLettersBlock.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"newsLettersBlock\":\"NewsLettersBlock_newsLettersBlock__OucRN\",\"newsLetterBlock__messageLine\":\"NewsLettersBlock_newsLetterBlock__messageLine__Nk7Ou\",\"newsLettersBlock__message\":\"NewsLettersBlock_newsLettersBlock__message__wGJCy\",\"newsLetterBlock__closeButton\":\"NewsLettersBlock_newsLetterBlock__closeButton__3E9YC\",\"newsLettersBlock_form\":\"NewsLettersBlock_newsLettersBlock_form__avAo1\",\"newsLetterBlock__title2\":\"NewsLettersBlock_newsLetterBlock__title2__qEOym\",\"content\":\"NewsLettersBlock_content__8W9Ci\",\"newsLetterBlock__inputSection\":\"NewsLettersBlock_newsLetterBlock__inputSection__0AVTe\",\"newsLetterBlock__button\":\"NewsLettersBlock_newsLetterBlock__button__JQWom\",\"newsLetterBlock__messageError\":\"NewsLettersBlock_newsLetterBlock__messageError__zrAWh\"};","// extracted by mini-css-extract-plugin\nexport default {\"subscribeForm\":\"SubscribeForm_subscribeForm__9lJpk\",\"messageLine\":\"SubscribeForm_messageLine__UP4GP\",\"message\":\"SubscribeForm_message__XYpIn\",\"closeButton\":\"SubscribeForm_closeButton__ZOw81\",\"form\":\"SubscribeForm_form__c7Kxt\",\"title\":\"SubscribeForm_title__TRBwU\",\"description\":\"SubscribeForm_description__mTWBD\",\"inputSection\":\"SubscribeForm_inputSection__tpsHP\",\"button\":\"SubscribeForm_button__mEaRT\",\"messageError\":\"SubscribeForm_messageError__D4WZS\"};","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport {useFormik} from 'formik';\nimport TextField from '../../components/form/formFields/TextField/TextField';\nimport CloseIcon from '../../components/svg/CloseIcon/CloseIcon';\nimport styles from './SubscribeForm.module.scss';\n\nconst SubscribeForm = ({title, description, buttonText, onSubmit, validationSchema}) => {\n  const [isMessageShowed, setIsMessageShowed] = useState(false);\n  const [message, setMessage] = useState({\n    message: '',\n    isError: false,\n  });\n\n  const formik = useFormik({\n    initialValues: {email: ''},\n    validationSchema: validationSchema,\n    onSubmit: (values, {resetForm}) => {\n      onSubmit(values)\n          .then((result) => {\n            if (result) {\n              setIsMessageShowed(true);\n              setMessage({message: result.message, isError: false});\n              resetForm();\n            }\n          })\n          .catch((error) => {\n            if (error) {\n              setIsMessageShowed(true);\n              setMessage({message: error.message, isError: true});\n            }\n          });\n    },\n  });\n\n  return (\n    <article className={styles.subscribeForm}>\n      <section\n        className={`${styles.messageLine} ${message.isError ? styles.messageError : ''}`}\n        style={{opacity: isMessageShowed ? '1' : '0'}}\n      >\n        <p className={styles.message}>{message.message}</p>\n        <button\n          className={styles.closeButton}\n          type='button'\n          aria-label='close message'\n          onClick={() => setIsMessageShowed(false)}\n        >\n          <CloseIcon />\n        </button>\n      </section>\n      <form className={styles.form} onSubmit={formik.handleSubmit}>\n        <h2 className={styles.title}>{title}</h2>\n        <p className={styles.description}>{description}</p>\n        <section className={styles.inputSection}>\n          <TextField\n            name='email'\n            placeholder='Enter your e-mail'\n            autoComplete='true'\n            onChange={formik.handleChange}\n            error={formik.errors.email}\n            value={formik.values.email}\n            touched={formik.touched}\n          />\n          <button\n            className={styles.button}\n            disabled={!formik.dirty}\n            type='submit'\n            aria-label='form submit'\n          >\n            <span>{buttonText}</span>\n          </button>\n        </section>\n      </form>\n    </article>\n  );\n};\n\nSubscribeForm.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  buttonText: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  validationSchema: PropTypes.object.isRequired,\n};\n\nexport default SubscribeForm;\n","import React, {\n//  useState\n} from 'react';\nimport styles from './NewsLettersBlock.module.scss';\nimport SubscribeForm from '../../../components/SubscribForm/SubscribeForm';\n// import {useFormik} from 'formik';\nimport {validationSchemaEmail} from '../../../utils/validationSchema';\n// import TextField from '../../../components/form/formFields/TextField/TextField';\n// import CloseIcon from '../../../components/svg/CloseIcon/CloseIcon';\nimport newsletterService from '../../../services/newsletter.service';\nimport generateErrorMessage from '../../../utils/generateErrorMessage';\n\nconst NewsLettersBlock = () => {\n  const isMobile = window.innerWidth <= 768;\n  const handleSubmit = (values) => {\n    return newsletterService.add({email: values.email})\n        .then((result) => ({\n          message: generateErrorMessage[result.response.message],\n        }))\n        .catch((error) => {\n          throw new Error(generateErrorMessage[error.response.data.response.message]);\n        });\n  };\n  //  const [isMessageShowed, setIsMessageShowed] = useState(false);\n  //  const [message, setMessage] = useState({\n  //    message: '',\n  //    isError: false,\n  //  });\n  //  const formik = useFormik({\n  //    initialValues: {\n  //      email: '',\n  //    },\n  //    validationSchema: validationSchemaEmail,\n  //    onSubmit: () => {\n  //      formik.resetForm();\n  //      newsletterService.add({email: formik.values.email})\n  //          .then((result)=> {\n  //            if (result) {\n  //              setIsMessageShowed(true);\n  //              setMessage({\n  //                message: generateErrorMessage[result.response.message],\n  //                isError: false,\n  //              });\n  //            }\n  //          })\n  //          .catch((error)=>{\n  //            if (error) {\n  //              setIsMessageShowed(true);\n  //              setMessage({\n  //                message: generateErrorMessage[error.response.data.response.message],\n  //                isError: true,\n  //              });\n  //            }\n  //          });\n  //    },\n  //  });\n  return (\n    <article className={styles.newsLettersBlock}>\n      <SubscribeForm\n        buttonText={`${isMobile?'Subscribe':'Subscribe to our newsletter'}`}\n        validationSchema={validationSchemaEmail}\n        onSubmit={handleSubmit}\n        description='SIGN UP TO GET 10% OFF ON YOUR FIRST ORDER, RELEASE NOTIFICATIONS AND EXCLUSIVE ACCESS BEFORE EVERYONE ELSE'\n        title='Newsletter'\n      />\n      {/* <section*/}\n      {/*  className={`${styles.newsLetterBlock__messageLine} ` + (message.isError ? `${styles.newsLetterBlock__messageError}`: '')}*/}\n      {/*  style={{opacity: isMessageShowed ? '1' : '0'}}*/}\n      {/* >*/}\n      {/*  <p className={styles.newsLettersBlock__message}>*/}\n      {/*    {message.message}*/}\n      {/*  </p>*/}\n      {/*  <button*/}\n      {/*    className={styles.newsLetterBlock__closeButton}*/}\n      {/*    type='button'*/}\n      {/*    aria-label='close message'*/}\n      {/*    onClick={()=> setIsMessageShowed(false)}*/}\n      {/*  >*/}\n      {/*    <CloseIcon/>*/}\n      {/*  </button>*/}\n      {/* </section>*/}\n      {/* <form*/}\n      {/*  className={styles.newsLettersBlock_form}*/}\n      {/*  data-testid=\"NewsLettersBlock\"*/}\n      {/*  onSubmit={formik.handleSubmit}*/}\n      {/* >*/}\n      {/*  <h2 className={styles.newsLetterBlock__title2}>*/}\n      {/* Newsletter*/}\n      {/*  </h2>*/}\n      {/*  <p className={styles.content}>*/}\n      {/*  SIGN UP TO GET 10% OFF ON YOUR FIRST ORDER, RELEASE NOTIFICATIONS*/}\n      {/*  AND EXCLUSIVE ACCESS BEFORE EVERYONE ELSE*/}\n      {/*  </p>*/}\n      {/*  <section className={styles.newsLetterBlock__inputSection}>*/}\n      {/*    <TextField*/}\n      {/*      name='email'*/}\n      {/*      placeholder={'Enter your e-mail'}*/}\n      {/*      autoComplete='true'*/}\n      {/*      onChange={formik.handleChange}*/}\n      {/*      error={formik.errors.email}*/}\n      {/*      value={formik.values.email}*/}\n      {/*      touched={formik.touched}*/}\n      {/*    />*/}\n      {/*    <button*/}\n      {/*      className={styles.newsLetterBlock__button}*/}\n      {/*      disabled={!formik.isValid || !formik.dirty}*/}\n      {/*      type='submit'*/}\n      {/*      aria-label='form submit'*/}\n      {/*    >*/}\n      {/*      <span>*/}\n      {/*        Subscribe to our newsletter*/}\n      {/*      </span>*/}\n      {/*    </button>*/}\n      {/*  </section>*/}\n      {/* </form>*/}\n    </article>\n  );\n};\n\nexport default NewsLettersBlock;\n"],"names":["_ref","title","description","buttonText","onSubmit","validationSchema","isMessageShowed","setIsMessageShowed","useState","message","setMessage","isError","formik","useFormik","initialValues","email","values","_ref2","resetForm","then","result","catch","error","_jsxs","className","styles","children","concat","style","opacity","_jsx","type","onClick","CloseIcon","handleSubmit","TextField","name","placeholder","autoComplete","onChange","handleChange","errors","value","touched","disabled","dirty","NewsLettersBlock","isMobile","window","innerWidth","SubscribeForm","validationSchemaEmail","newsletterService","add","generateErrorMessage","response","Error","data"],"sourceRoot":""}