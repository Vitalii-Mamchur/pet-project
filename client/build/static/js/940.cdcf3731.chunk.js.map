{"version":3,"file":"static/js/940.cdcf3731.chunk.js","mappings":"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","sources":["webpack://pet-project-frontend/./src/pages/loginLayoutPage/RegisterFormPage/RegisterForm.module.scss?cbec","webpack://pet-project-frontend/./src/components/modal/modalContent/ModalVerifyEmail/ModalVerifyEmail.module.scss?bb5c","components/modal/modalContent/ModalVerifyEmail/ModalVerifyEmail.jsx","webpack://pet-project-frontend/./src/components/form/formBlocks/RegisterFormBlock/RegisterFormBlock.module.scss?d7a0","components/form/formBlocks/RegisterFormBlock/RegisterFormBlock.jsx","pages/loginLayoutPage/RegisterFormPage/RegisterForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"registerForm\":\"RegisterForm_registerForm__sAOEi\",\"registerForm__titleBlock\":\"RegisterForm_registerForm__titleBlock__In+b-\",\"registerForm__errorMessagesBlock\":\"RegisterForm_registerForm__errorMessagesBlock__QlzBU\",\"registerForm__backToSignIn\":\"RegisterForm_registerForm__backToSignIn__VpIgO\",\"registerForm__backToSignInLink\":\"RegisterForm_registerForm__backToSignInLink__hnk9+\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalVerifyEmail\":\"ModalVerifyEmail_modalVerifyEmail__Bnc5b\",\"modalVerifyEmail__closeButton\":\"ModalVerifyEmail_modalVerifyEmail__closeButton__GLs+p\",\"modalVerifyEmail__content\":\"ModalVerifyEmail_modalVerifyEmail__content__pN1Jd\"};","import React from 'react';\nimport styles from './ModalVerifyEmail.module.scss';\nimport CloseIcon from '../../../svg/CloseIcon/CloseIcon';\nimport PropTypes from 'prop-types';\n\n\nconst ModalVerifyEmail = ({handleCloseModal, email}) => (\n  <div className={styles.modalVerifyEmail} data-testid=\"ModalVerifyEmail\">\n    <button\n      className={styles.modalVerifyEmail__closeButton}\n      type='button'\n      aria-label='close modal window'\n      onClick={handleCloseModal}\n    >\n      <CloseIcon/>\n    </button>\n    <p className={styles.modalVerifyEmail__content}>\n      We have sent an e-mail to {email} please click on the link to confirm your e-mail address.\n    </p>\n  </div>\n);\nModalVerifyEmail.propTypes = {\n  email: PropTypes.string,\n  handleCloseModal: PropTypes.func,\n};\nexport default ModalVerifyEmail;\n","// extracted by mini-css-extract-plugin\nexport default {\"registerFormBlock\":\"RegisterFormBlock_registerFormBlock__P9VNj\",\"registerFormBlock__form\":\"RegisterFormBlock_registerFormBlock__form__Zwx9V\",\"termsLink\":\"RegisterFormBlock_termsLink__oEgQ9\",\"registerFormBlock__button\":\"RegisterFormBlock_registerFormBlock__button__RJHO2\",\"registerFormBlock__socialButtonsBlock\":\"RegisterFormBlock_registerFormBlock__socialButtonsBlock__XOcCf\",\"registerFormBlock__divider\":\"RegisterFormBlock_registerFormBlock__divider__JkGof\",\"registerFormBlock__buttonsBlock\":\"RegisterFormBlock_registerFormBlock__buttonsBlock__rs2dk\",\"registerFormBlock__googleButton\":\"RegisterFormBlock_registerFormBlock__googleButton__pZazu\",\"registerFormBlock__socialIcon\":\"RegisterFormBlock_registerFormBlock__socialIcon__KhPVH\"};","import React from 'react';\nimport styles from './RegisterFormBlock.module.scss';\nimport TextField from '../../formFields/TextField/TextField';\nimport PropTypes from 'prop-types';\nimport CheckboxField from '../../formFields/CheckboxField/CheckboxField';\nimport {useSelector} from 'react-redux';\nimport {getUserLoadingStatus} from '../../../../store/userSlice';\nimport LoaderIconSmall from '../../../svg/loaderIcons/LoaderSmallIcon/LoaderIconSmall';\nimport GoogleIcon from '../../../svg/socialMediaIcons/GoogleIcon/GoogleIcon';\nimport {NavLink} from 'react-router-dom';\n\nconst RegisterFormBlock = ({formik, googleRegister, isRegularSignUp, isGoogleSignUp}) => {\n  const isLoading = useSelector(getUserLoadingStatus);\n\n  return (\n    <section className={styles.registerFormBlock} data-testid=\"RegisterFormBlock\">\n      <form\n        className={styles.registerFormBlock__form}\n        onSubmit={formik.handleSubmit}\n      >\n        <TextField\n          label='First name'\n          name='firstName'\n          placeholder={'Enter your first name'}\n          value={formik.values.firstName}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.errors.firstName}\n          touched={formik.touched}\n          isSubmiting={formik.isSubmitting}\n        />\n        <TextField\n          label='Last name'\n          name='lastName'\n          placeholder={'Enter your last name'}\n          value={formik.values.lastName}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.errors.lastName}\n          touched={formik.touched}\n        />\n        <TextField\n          label='Email'\n          name='email'\n          placeholder={'example@ex.com'}\n          value={formik.values.email.toLowerCase()}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.errors.email}\n          touched={formik.touched}\n        />\n        <TextField\n          type='password'\n          label='Password'\n          name='password'\n          placeholder='**********'\n          value={formik.values.password}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.errors.password}\n          touched={formik.touched}\n        />\n        <TextField\n          type='password'\n          label='Confirm password'\n          name='confirmPassword'\n          placeholder='**********'\n          value={formik.values.confirmPassword}\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          error={formik.errors.confirmPassword}\n          touched={formik.touched}\n        />\n        <CheckboxField\n          name='license'\n          value={formik.values.license}\n          onChange={formik.handleChange}\n          error={formik.errors.license}\n        >\n            I agree to the&nbsp;\n          <NavLink\n            className={styles.termsLink}\n            target={'_blank'}\n            title = 'terms and conditions'\n            aria-label='open terms and conditions'\n            to={'/help/faq'}>\n                  Terms and conditions of use.\n          </NavLink>\n        </CheckboxField>\n        <button\n          type='submit'\n          disabled={!formik.isValid}\n          className={styles.registerFormBlock__button}\n        >\n          {\n          (isLoading && isRegularSignUp) ?\n            <LoaderIconSmall /> :\n            <>\n              <span>\n                    Sign up\n              </span>\n              <div/>\n            </>\n          }\n        </button>\n      </form>\n      <div className={styles.registerFormBlock__socialButtonsBlock}>\n        <div className={styles.registerFormBlock__divider}>\n          <div></div>\n          <span>or</span>\n          <div></div>\n        </div>\n        <div className={styles.registerFormBlock__buttonsBlock}>\n          <div\n            id='signUpDiv'>\n          </div>\n          <button className={styles.registerFormBlock__googleButton}\n            type='button'\n            onClick={() => googleRegister()}\n          >\n            {\n              (isLoading &&isGoogleSignUp) ?\n                <LoaderIconSmall/>:\n                <>\n                  <div className={styles.registerFormBlock__socialIcon}>\n                    <GoogleIcon />\n                  </div>\n                  <span>\n                      Sign up with Google\n                  </span>\n                </>\n            }\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n};\nRegisterFormBlock.propTypes = {\n  formik: PropTypes.object.isRequired,\n  googleRegister: PropTypes.func.isRequired,\n  isGoogleSignUp: PropTypes.bool,\n  isRegularSignUp: PropTypes.bool,\n};\nexport default RegisterFormBlock;\n","import React, {useEffect, useState} from 'react';\nimport styles from './RegisterForm.module.scss';\nimport {useFormik} from 'formik';\nimport {NavLink, useNavigate} from 'react-router-dom';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {getError, getResponse, signUpUser, signUpWithGoogle} from '../../../store/userSlice';\nimport {useGoogleLogin} from '@react-oauth/google';\nimport {validationSchemaRegisterForm} from '../../../utils/validationSchema';\nimport googleService from '../../../services/google.service';\nimport {Modal} from '../../../components/modal';\nimport ModalVerifyEmail from '../../../components/modal/modalContent/ModalVerifyEmail/ModalVerifyEmail';\nimport {showBodyOverflow, hideBodyOverflow} from '../../../utils/modal.service';\nimport RegisterFormBlock from '../../../components/form/formBlocks/RegisterFormBlock/RegisterFormBlock';\nimport useErrorMessage from '../../../utils/useErrorMessage';\n\nconst RegisterForm = () => {\n  const dispatch = useDispatch();\n  const authError = useSelector(getError);\n  const response = useSelector(getResponse);\n  const navigate = useNavigate();\n  const errorMessage = useErrorMessage(authError);\n  const [isRegularSignUp, setIsRegularSignUp] = useState(false);\n  const [isGoogleSignUp, setIsGoogleSignUp] = useState(false);\n  const [showVerifyEmailModal, setShowVerifyEmailModal] = useState(false);\n  const [email, setEmail] = useState(null);\n  const formik = useFormik({\n    initialValues: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n      license: false,\n    },\n    validationSchema: validationSchemaRegisterForm,\n    onSubmit: (values) => {\n      setIsRegularSignUp(true);\n      setIsGoogleSignUp(false);\n      setEmail(values.email);\n      dispatch(signUpUser({...values, email: values.email.toLowerCase()})).then(()=>{\n        setIsRegularSignUp(true);\n      });\n      formik.resetForm();\n    },\n  });\n\n  const googleRegister = useGoogleLogin({\n    onSuccess: (tokenResponse) => {\n      const accessToken = tokenResponse.access_token;\n      googleService.get(accessToken).then((userInfo) => {\n        dispatch(signUpWithGoogle({\n          firstName: userInfo.given_name,\n          lastName: userInfo.family_name,\n          email: userInfo.email,\n        }));\n      });\n    },\n  });\n  const closeModal = () => {\n    setShowVerifyEmailModal(false);\n    showBodyOverflow();\n    navigate('/signIn');\n  };\n  useEffect(()=>{\n    if (response) {\n      if (response.code === 201) {\n        setShowVerifyEmailModal(true);\n        hideBodyOverflow();\n        formik.resetForm();\n      }\n    }\n  }, [response]);\n  return (\n    <article className={styles.registerForm}>\n      <section className={styles.registerForm__titleBlock}>\n        <p>\n          Sign up\n        </p>\n        <p>\n          Welcome! Please enter your details\n        </p>\n      </section>\n      {errorMessage ?\n          <div className={styles.registerForm__errorMessagesBlock}>\n            <p>{errorMessage}</p>\n          </div> : null\n      }\n      <RegisterFormBlock\n        formik={formik}\n        googleRegister={googleRegister}\n        isRegularSignUp={isRegularSignUp}\n        isGoogleSignUp={isGoogleSignUp}\n      />\n      <p className={styles.registerForm__backToSignIn}>\n        Already have an account?&nbsp;\n        <NavLink\n          to=\"/signIn\"\n          title='go to sign in page'\n          aria-label='go to sign ip page'\n          className={styles.registerForm__backToSignInLink}\n        >\n          <span>Sign in</span>\n        </NavLink>\n      </p>\n      <Modal\n        isOpen={showVerifyEmailModal}\n        handleCloseModal={closeModal}\n      >\n        <ModalVerifyEmail handleCloseModal={closeModal} email={email}/>\n      </Modal>\n    </article>\n  );\n};\n\nexport default RegisterForm;\n"],"names":["_ref","handleCloseModal","email","_jsxs","className","styles","children","_jsx","type","onClick","CloseIcon","formik","googleRegister","isRegularSignUp","isGoogleSignUp","isLoading","useSelector","getUserLoadingStatus","onSubmit","handleSubmit","TextField","label","name","placeholder","value","values","firstName","onChange","handleChange","onBlur","handleBlur","error","errors","touched","isSubmiting","isSubmitting","lastName","toLowerCase","password","confirmPassword","CheckboxField","license","NavLink","target","title","to","disabled","isValid","LoaderIconSmall","_Fragment","id","GoogleIcon","RegisterForm","dispatch","useDispatch","authError","getError","response","getResponse","navigate","useNavigate","errorMessage","useErrorMessage","setIsRegularSignUp","useState","setIsGoogleSignUp","showVerifyEmailModal","setShowVerifyEmailModal","setEmail","useFormik","initialValues","validationSchema","validationSchemaRegisterForm","signUpUser","then","resetForm","useGoogleLogin","onSuccess","tokenResponse","accessToken","access_token","googleService","get","userInfo","signUpWithGoogle","given_name","family_name","closeModal","showBodyOverflow","useEffect","code","hideBodyOverflow","RegisterFormBlock","Modal","isOpen","ModalVerifyEmail"],"sourceRoot":""}